{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/searchBox.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","monster","name","src","id","email","CardList","monsters","map","el","SearchBox","placeholder","fn","type","onChange","App","filterMonsterFn","e","setState","searchField","target","value","console","log","this","state","fetch","then","res","json","data","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAEaA,G,MAAO,SAACC,GACnB,OACE,sBAAKC,UAAU,OAAf,UACE,qBACEC,IAAKF,EAAMG,QAAQC,KACnBC,IAAG,+BAA0BL,EAAMG,QAAQG,GAAxC,4BAEL,oBAAIL,UAAU,YAAd,SAA2BD,EAAMG,QAAQC,OACzC,mBAAGH,UAAU,YAAb,SAA0BD,EAAMG,QAAQI,aCNjCC,G,MAAW,SAACR,GACvB,OACE,qBAAKC,UAAU,WAAf,SACGD,EAAMS,SAASC,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,CAAkBR,QAASQ,GAAhBA,EAAGL,WCNTM,G,MAAY,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,YAAaC,EAAS,EAATA,GACvC,OACE,uBACEb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC4EDG,G,wDA5Eb,aAAe,IAAD,8BACZ,gBAmBFC,gBAAkB,SAACC,GAEjB,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,QAAS,WAC7CC,QAAQC,IAAIC,KAAKC,MAAMN,iBArBzB,EAAKM,MAAQ,CACXlB,SAAU,GACVY,YAAa,IAJH,E,gEAQO,IAAD,OAClBO,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAU,EAAKZ,SAAS,CAAEX,SAAUuB,S,+BAuB5CR,QAAQC,IAAIC,MADL,MAE2BA,KAAKC,MAA/BlB,EAFD,EAECA,SAAUY,EAFX,EAEWA,YACZY,EAAmBxB,EAASyB,QAAO,SAACvB,GAAD,OACvCA,EAAGP,KAAK+B,cAAcC,SAASf,EAAYc,kBAG7C,OAEE,cADA,CACA,OAAKlC,UAAU,MAAf,UACE,oBAAIA,UAAU,eAAd,8BACA,cAAC,EAAD,CAEEY,YAAY,qBACZC,GAAIY,KAAKR,iBAFL,qBAIN,cAAC,EAAD,CAA6BT,SAAUwB,GAAzB,uB,GAlDJI,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8991d6ab.chunk.js","sourcesContent":["import \"./card.styles.css\";\r\n\r\nexport const Card = (props) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <img\r\n        alt={props.monster.name}\r\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=200x200`}\r\n      />\r\n      <h2 className=\"heading-2\">{props.monster.name}</h2>\r\n      <p className=\"paragraph\">{props.monster.email}</p>\r\n    </div>\r\n  );\r\n};\r\n","// import React from \"react\";\r\nimport { Card } from \"../card/card.component\";\r\nimport \"./card-list.styles.css\";\r\n\r\nexport const CardList = (props) => {\r\n  return (\r\n    <div className=\"cardlist\">\r\n      {props.monsters.map((el) => (\r\n        <Card key={el.id} monster={el} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import \"./searchBox.styles.css\";\r\n\r\nexport const SearchBox = ({ placeholder, fn }) => {\r\n  return (\r\n    <input\r\n      className=\"search\"\r\n      type=\"search\"\r\n      placeholder={placeholder}\r\n      onChange={fn}\r\n    />\r\n  );\r\n};\r\n","import { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/searchBox.component\";\n\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => res.json())\n      .then((data) => this.setState({ monsters: data }));\n  }\n\n  /**\n   * the speciality of arrow function is that instead of storing the method inside the prototype chain what it does is it makes the\n   * function a method of the newly created Object(it makes it its own method).\n   * Now the beauty of this is that the this keyword in the method that is in the prototype chain will point to nothing but the\n   * this keyword inside the method that is the own method of the object will point to that object!!\n   */\n  filterMonsterFn = (e) => {\n    //setState is a async function\n    this.setState({ searchField: e.target.value }, function () {\n      console.log(this.state.searchField);\n    });\n  };\n\n  //UNIDIRECTIONAL DATA FLOW\n  /**\n   * the main workings of react app is based on the state data it is provided with and on the basis of that data the app is re-rendered\n   * that is whenever setState is called and the state data is changed the render() function is called again. And this makes sure that\n   * the entire app is based on the new state.This means you should not change the state directly like this.state.name = 'blah'\n   */\n  render() {\n    console.log(this);\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((el) =>\n      el.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      //this is not standard html but JSX(javascript XML)\n      <div className=\"App\">\n        <h1 className=\"heading-main\">monsters rolodex</h1>\n        <SearchBox\n          key=\"monster_searchBox\"\n          placeholder=\"search monsters...\"\n          fn={this.filterMonsterFn}\n        />\n        <CardList key=\"monster_list\" monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}